
[00400014] 0c100009  jal 0x00400024 [main]    ; 188: jal main
R6  [a2] = 7ffff4a8

[00400024] 23bdfff8  addi $29, $29, -8        ; 6: sub $sp,$sp,8 # push stack to save registers needed by the system code that called main 

[00400028] afbf0000  sw $31, 0($29)           ; 7: sw $ra,0($sp) # save return address 
R29 [sp] = 7ffff490

[0040002c] 34040004  ori $4, $0, 4            ; 10: li $a0,4 # a = 4 - li is a pseudo-instruction that loads a constant. 


[00400030] 34050003  ori $5, $0, 3            ; 11: li $a1,3 # b = 3 
R4  [a0] = 4

[00400034] 34060002  ori $6, $0, 2            ; 12: li $a2,2 # c = 2 
R5  [a1] = 3

[00400038] 34070001  ori $7, $0, 1            ; 13: li $a3,1 # d = 1 
R6  [a2] = 2

[0040003c] 0c10001b  jal 0x0040006c [sum]     ; 14: jal sum # call subroutine sum to compute a+b+c+d 

[0040006c] 23bdfffc  addi $29, $29, -4        ; 50: sub $sp,$sp,4 # Push stack to create room to save register $s0 
R31 [ra] = 400040

[00400070] afb00000  sw $16, 0($29)           ; 51: sw $s0,0($sp) # save $s0 on stack 
R29 [sp] = 7ffff48c

[00400074] 00854020  add $8, $4, $5           ; 55: add $t0,$a0,$a1 # a + b 
R4  [a0] = 4
R5  [a1] = 3
R8  [t0] = 7

[00400078] 00c74820  add $9, $6, $7           ; 56: add $t1,$a2,$a3 # c + d 
R9  [t1] = 3

[0040007c] 01098020  add $16, $8, $9          ; 57: add $s0,$t0,$t1 # $s = $t0 + $t1 = a + b + c + d 

[00400080] 02001020  add $2, $16, $0          ; 58: add $v0,$s0,$zero # return sum = s 
R16 [s0] = a

[00400084] 8fb00000  lw $16, 0($29)           ; 60: lw $s0,0($sp) # restore $s0 to value prior to function call 
R2  [v0] = a
R29 [sp] = 7ffff48c

[00400088] 23bd0004  addi $29, $29, 4         ; 61: add $sp,$sp,4 # pop stack 
R16 [s0] = 0

[0040008c] 03e00008  jr $31                   ; 62: jr $ra # return to calling procedure 
R29 [sp] = 7ffff490

[00400040] afa20004  sw $2, 4($29)            ; 15: sw $v0,4($sp) # result returned in $v0 and stored on the stack 

[00400044] 34020004  ori $2, $0, 4            ; 19: li $v0,4 # the argument to a system call is placed in register $v0 

[00400048] 3c011001  lui $1, 4097 [str]       ; 21: la $a0,str # pseudo-instruction to load the address of the label str 
R2  [v0] = 4

[0040004c] 34240000  ori $4, $1, 0 [str]

[00400050] 0000000c  syscall                  ; 23: syscall # system call to print the string at address str 
R4  [a0] = 10010000

[00400054] 34020001  ori $2, $0, 1            ; 25: li $v0,1 # The value 1 tells syscall to print an integer 

[00400058] 8fa40004  lw $4, 4($29)            ; 26: lw $a0,4($sp) # Load the sum from the stack to register $a0 
R2  [v0] = 1

[0040005c] 0000000c  syscall                  ; 27: syscall # System call to print the integer in register $a0 
R4  [a0] = a

[00400060] 8fbf0000  lw $31, 0($29)           ; 29: lw $ra,0($sp) # restore return address used to jump back to system 

[00400064] 23bd0008  addi $29, $29, 8         ; 30: add $sp,$sp,8 # pop stack to prepare for the return to the system 
R31 [ra] = 400018

[00400068] 03e00008  jr $31                   ; 31: jr $ra # [jump register] return to the system 
R29 [sp] = 7ffff498

[00400018] 00000000  nop                      ; 189: nop 

[0040001c] 3402000a  ori $2, $0, 10           ; 191: li $v0 10 

[00400020] 0000000c  syscall                  ; 192: syscall # syscall 10 (exit) 
R2  [v0] = a